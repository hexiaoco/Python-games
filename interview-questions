2017-03-09 Thirsday 9:34

Python:
1. xrange
	
	xrange 和range 的用法完全相同，但是返回的是一个生成器。
	在循环中尽量使用 xrange 这样性能可以得到提高，除非你要返回一个列表。
	for i in range(1000): pass		for i in xrange(1000): pass		前一个返回1000个元素的列表，而后一个在每次迭代中返回一个元素，因此可以使用迭代器来解决复用可占空间的问题

2. 面向对象的三要素

	封装、继承、多态。

3. django创建应用的命令

	django-admin.py startproject mysite
	python manage.py startapp books

4. is 与 == 的区别

	Python中的对象包含三要素：id、type、value
	其中id用来唯一标识一个对象，type标识对象的类型，value是对象的值
	is判断的是a对象是否就是b对象，是通过id来判断的
	==判断的是a对象的值是否和b对象的值相等，是通过value来判断的

5. 装饰器的本质是什么？是类、对象还是什么？
6. 简述python内存管理

	内存管理：
		C 		==》	手工管理
		Java	==》	垃圾回收
		
7. Python中的数据类型

	* python变量无需声明;Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。
	* python中，一切事物皆是对象，所有变量都是引用类型变量; 【Python中变量是无类型的，对象是有类型的，并且一个对象的类型是不可改变的，所以Python是强类型语言。tuple([2,6,8])不会把列表变成元组,而是根据一个列表对象新建一个元组对象。】【 Python中的对象分为immutable object和mutable object，前一个是不可变对象，例如字符串，整数，元组等，后面的是可变对象，例如列表，bytearray（In Python 3.0+）等。】
	* del 操作符可删除对象的引用。e.g.-->a=1; b=2; del a,b; print a --->name 'a' is not defined

	检测数据类型的函数：
		* type()	# type(1.0)
		* isintance(v, type)	# isinstance() arg 2 must be a class, type, or tuple of classes and types. e.g.-->isinstance(lst, (list, int, bool, str))

	数据类型：int, long, float, str, bool, list(有序集合), dict, tuple(有序集合), set(无序集合), object, type, classobj(自定义类), instance(由类生成的对象), Iterable(迭代器), listiterator(迭代器), generator(生成器), enumerate, time.struct_time, datetime.datetime
			int: -9223372036854775808--9223372036854775807  19位 最大的int值：sys.maxint
			str: Python中的字符串有两种数据类型：str类型和unicode类型。str类型采用的ASCII编码，也就是说它无法表示中文。unicode类型采用unicode编码，能够表示任意字符，包括中文及其它语言。并且python中不存在像c语言中的char类型，就算是单个字符也是字符串类型。字符串默认采用的ASCII编码，如果要显示声明为unicode类型的话，需要在字符串前面加上'u'或者'U'。
				由于项目中经常出现对字符串的操作，而且由于字符串编码问题出现的问题很多，下面，来说一下关于字符串的编码问题。在与python打交道的过程中经常会碰到ASCII、Unicode和UTF-8三种编码。具体的介绍请参见这篇文章。我简单的理解就是，ASCII编码适用英文字符，Unicode适用于非英文字符（例如中文、韩文等），而utf-8则是一种储存和传送的格式，是对Uncode字符的再编码（以8位为单位编码）。例如：
				u = u'汉'
				print repr(u) # u'\u6c49' 
				s = u.encode('UTF-8') 
				print repr(s) # '\xe6\xb1\x89' 
				u2 = s.decode('UTF-8') 
				print repr(u2) # u'\u6c49' 
				
				对于编码的经验总结：
					1.在python文件头声明编码格式: #-*- coding: utf-8 -*-  
					2.将字符串统一声明为unicode类型，即在字符串前加u或者U;
					3.对于文件读写的操作，建议适用codecs.open()代替内置的open()，遵循一个原则，用哪种格式写，就用哪种格式读；
			list: 
				li.insert(pos, value)	
				删除元素--> li.remove('aaa')	li.pop(index)	del li[index]
				list.count(obj) 统计某个元素在列表中出现的次数
				list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表)
				list.index(obj) 从列表中找出某个值第一个匹配项的索引位置，索引从0开始
				list.insert(index, obj) 将对象插入列表
				list.remove(obj) 移除列表中某个值的第一个匹配项
				list.reverse() 反向列表中元素，倒转
				list.sort([func]) 对原列表进行排序
				列表所支持的方法，可以用如下方式查看列表支持的公共方法：
					[x for x in dir([]) if not x.startswith("__")]	--> ['append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
			tuple: 
				tup3 = "a", "b", "c", "d";
				元组中只有一个元素时，需要在元素后面添加逗号，例如：tup1 = (50,);
				cmp(tuple1, tuple2) 比较两个元组元素。
			set:	dict是建立了一系列的映射关系，而set是建立一系列无序的，不重复的元素。
				s0 = {1,2,3}; s1 = set([1,2,3,3]);	重复元素在Set中自动过滤
				.add()	add()添加，有重复元素可以添加，但不会有效果
				.remove()
				S1 = set([1,2]); S2 = set([2,3]); S1&S2 --> {2}; S1|S2 --> {1, 2, 3}; S1-S2 --> set([]); S1^S2 --> {1,3}	# set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集
			dict:	键可以是数字、字符串或者是元组等不可变类型
				删除：dict.pop('name');	del dict['name']; # 删除键是'name'的条目		dict.clear(); # 清空词典所有条目		del dict ; # 删除词典
				cmp(dict1, dict2) 比较两个字典元素。
				len(dict) 计算字典元素个数，即键的总数。
				str(dict) 输出字典可打印的字符串表示。
				.clear() 删除字典内所有元素
				.copy() 返回一个字典的浅复制(值的复制)
				.fromkeys() 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值	#dict5 = {}.fromkeys(["name","age"])
				.get(key, default=None) 返回指定键的值，如果键不在字典中返回default值
				.has_key(key) 如果键在字典dict里返回true，否则返回false
				.items() 以列表返回可遍历的(键, 值) 元组数组
				.keys() 以列表返回一个字典所有的键
				.values() 以列表返回字典中的所有值
				.setdefault(key, default=None) 和get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为default
				.update(dict2) 把字典dict2的键/值对更新到dict里
				dict3 = dict([("name","kitty"),("age",18)])
				dict4 = dict(name='kitty',age=18)
				[x for x in dir({}) if not x.startswith("__")]	#查看字典的所有公共方法
				dict.iter()  #方法iteritems(), iterkeys(), itervalues()与它们对应的非迭代方法一样，不同的是它们返回一个迭代器，而不是一个列表。
			time:
				type(time.localtime())	--> <type 'time.struct_time'>
				time.localtime()		--> time.struct_time(tm_year=2017, tm_mon=3, tm_mday=15, tm_hour=11, tm_min=15, tm_sec=42, tm_wday=2, tm_yday=74, tm_isdst=0)
				time.strftime('%Y-%m-%d %H:%M:%S')
				time.strptime(timestr, '%Y-%m-%d %H:%M:%S')
			datetime:
				datetime.datetime.now()
				datetime.date.today()
				datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
				datetime.datetime.strptime(expire_time,"%Y-%m-%d %H:%M:%S")
	
				oneday = datetime.timedelta(days=1)
				today = datetime.date.today()
				yesterday = datetime.date.today() - oneday
				tomorrow = datetime.date.today() + oneday
				today_zero_time = datetime.datetime.strftime(today, '%Y-%m-%d %H:%M:%S')

				datetime.timedelta(milliseconds=1), #1毫秒
				datetime.timedelta(seconds=1), #1秒
				datetime.timedelta(minutes=1), #1分钟
				datetime.timedelta(hours=1), #1小时
				datetime.timedelta(days=1), #1天
				datetime.timedelta(weeks=1)
				
				last_month_last_day = datetime.date(datetime.date.today().year,datetime.date.today().month,1)-datetime.timedelta(1)	#获取上个月最后一天
				d = datetime.datetime.now()					
				struct_time = d.timetuple()					#
				time_sec_float = time.mktime(struct_time)	# time.mktime(struct_time)
				

	对象类型判断：
		isinstance(list, type) 		-->
		isinstance(list, object)  	-->
			
	数据类型转换：
		* cmp(x, y) 如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1
		* repr(x) 将对象x转换为表达式字符串
		* eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象
		* tuple(s)	e.g.--> tuple('abc')-->('a','b','c'); 
		* chr(x) 将一个整数转换为一个字符 
		* unichr(x) 将一个整数转换为Unicode字符 
		* ord(x) 取得字符的字符编码
		* hex(x) 将一个整数转换为一个十六进制字符串
		* oct(x) 将一个整数转换为一个八进制字符串

	数学函数:
		* abs(x)    返回数字的绝对值，如abs(-10) 返回 10
		* ceil(x)    返回数字的上入整数，如math.ceil(4.1) 返回 5
		* floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4
		* max(x1, x2,...)    返回给定参数的最大值，参数可以为序列。
		* min(x1, x2,...)    返回给定参数的最小值，参数可以为序列。
		* pow(x, y) x**y 运算后的值。
		* round(x [,n]) 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
		* math.sqrt(x)    返回数字x的平方根


8. Python中的特殊概念
==================================
dir()
生成器generator: 如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。
	创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误。
	L = [x * x for x in range(10)]
	g = (x * x for x in range(10))	


迭代器iterator: 所谓的迭代器就是具有next方法（这个方法在调用时不需要任何参数）的对象。在调用next方法时，迭代器会返回它的下一个值。如果next方法被调用，但迭代器没有值可以返回，就会引发一个StopIteration异常。迭代器相对于列表的优势在于，使用迭代器不必一次性将列表加入内存，而可以依次访问列表的数据。
	iterable需要包含有__iter()方法用来返回iterator，而iterator需要包含有next__()方法用来被循环.如果我们自己定义迭代(iterable)，只要在类里面定义一个 iter() 函数，用它来返回一个带 next() 方法的对象就够了。
	Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。
	Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。
	lst = [1,2,3,4,5] 
	lstiter = iter(lst)
	lstiter.next()
Demo1:
>>> for i, value in enumerate(['A', 'B', 'C']):
...     print(i, value)
...
0 A
1 B
2 C

Demo2:
>>> for x, y in [(1, 1), (2, 4), (3, 9)]:
...     print(x, y)
...
1 1
2 4
3 9

Demo3:
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> for k, v in d.items():
...     print(k, '=', v)
...
y = B
x = A
z = C


列表生成式
Demo1:
>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']

Demo2:
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.items()]
['y=B', 'x=A', 'z=C']

Demo3:
>>> L = ['Hello', 'World', 'IBM', 'Apple']
>>> [s.lower() for s in L]
['hello', 'world', 'ibm', 'apple']

推导式comprehensions(又称解析式)


=========================================
# 斐波那契数列生成函数
def fib(max):
	n,a,b = 0,0,1
	while n<=max:
		a,b = b,a+b
		print b
		n += 1

# 斐波那契数列生成器
def fibor(max):
    n,a,b = 0,0,1
    while n<=max:
        a,b = b,a+b
        yield b
        n += 1

=========================================
# 杨辉三角生成函数
def generate(max):
	n = 1
	res_list = []
	while n<=max:
		li = [1]
		if n>1:
			for i in range(0,len(res_list[n-2])-1):
				li.append(res_list[n-2][i]+res_list[n-2][i+1])
			li.append(1)
		res_list.append(li)
		n += 1
	print res_list

# 杨辉三角生成器
def triangles(max):
	n = 1 
    res_list = []
    while n<=max:
        li = [1] 
        if n>1:
            for i in range(0,len(res_list[n-2])-1):
                li.append(res_list[n-2][i]+res_list[n-2][i+1])
            li.append(1)
       	res_list.append(li)
		yield li
        n += 1
    print res_list
